'use strict'

/* Вночі у головного інженера хтось поцупив зі столу креслення. Тепер ми не знаємо, які дані потрібні, щоб роботи працювали коректно. 
Пропоную зловити одного робота, який зараз прибирає у коридорі, під'єднатися до його терміналу і дізнатися, які поля нам потрібні для нових роботів.

Створи функцію getRobotSchema, яка приймає об'єкт robot і повертає його схему - об'єкт з тими самими ключами, а як значення використай типи даних. */

function getRobotSchema(robot) {
    let robotScheme = {};
  
    for (const entry of Object.entries(robot)) {
      robotScheme[entry[0]] = typeof entry[1];
    }
  
    return robotScheme;
  }

/* Ironman триатлон - це одна з серій триатлонових перегонів, на довгі дистанції. 
Вона складається з плавання (3,86 км), їзди на велосипеді (180,25 км) і марафону (42,2 км) і це все за 17 годин, без зупинок, без відпочинку. Повір - це боляче і важко.

Твоє завдання - створити функцію getTriathlonDistance, яка приймає число distance, що представляє відстань, яку атлет вже подолав.

Функція повинна визначити, на якому етапі триатлону знаходиться спортсмен залежно від distance, і повернути відповідне повідомлення.

Поверни одне зі значень:

Якщо distance = 0 - рядок Starting Line... Good Luck!.
Якщо distance більша за 0 і менша за 3.86 - об'єкт з ключем swim, значенням якого є залишок до кінця дистанції (що означає, що атлет зараз пливе).
Якщо distance дорівнює або більша за 3.86 і менша за 184.11 - об'єкт з ключем bike, значенням якого є залишок до кінця дистанції (що означає, що атлет зараз їде на велосипеді).
Якщо distance дорівнює або більша за 184.11 і менша за 226.31 - об'єкт з ключем run, значенням якого є залишок до кінця дистанції (що означає, що атлет зараз біжить марафон).
Якщо distance дорівнює або більша за 226.31 - рядок You\'re done! Stop running! (що означає, що атлет завершив тріатлон).
Примітка: відстані мають мати 2 знаки після коми. */

function getTriathlonDistance(distance) {

    if (distance === 0) {
      return 'Starting Line... Good Luck!';
    }
    if (distance > 0 && distance < 3.86) {
      return {swim: `${(226.31 - distance).toFixed(2)} to go!`};
    }
  
    if (distance >= 3.86 && distance < 184.11) {
      return {bike: `${(226.31 - distance).toFixed(2)} to go!`};
    }
  
    if (distance >= 184.11 && distance < 226.31) {
      return {run: `${(226.31 - distance).toFixed(2)} to go!`};
    }
  
    if (distance >= 226.31) {
      return "You're done! Stop running!";
    }
  }

